@page "/map"
@using CharityRabbit.Data
@using CharityRabbit.Models
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using MudBlazor

@inject Neo4jService Neo4jService

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <MudPaper Elevation="4" Class="pa-4">
        <MudText Typo="Typo.h4" GutterBottom="true" Class="text-center mb-3">Good Works Map</MudText>
        <GoogleMap @ref="_map" Options="@_mapOptions" Height="600px" OnAfterInit="AfterMapRender">
        </GoogleMap>
    </MudPaper>

    <MudFab Icon="@Icons.Material.Filled.Refresh" Class="fab-refresh" OnClick="ReloadData" Color="Color.Secondary" />

    <MudDrawer Anchor="Anchor.End" Open="@isDrawerOpen" Class="pa-4" Width="400px" Variant="DrawerVariant.Temporary">
        <MudToolbar>
            <MudText Typo="Typo.h6" Class="ml-2">Good Works Details</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="() => isDrawerOpen = false" />
        </MudToolbar>
        <MudDivider />
        @if (selectedWork != null)
        {
            <MudCard Class="ma-2 pa-4">
                <MudCardContent>
                    <MudText Typo="Typo.h5" Class="mb-2">@selectedWork.Name</MudText>
                    <MudText Class="mb-2">@selectedWork.Description</MudText>
                    <MudText><strong>Category:</strong> @selectedWork.Category</MudText>
                    <MudText><strong>Effort Level:</strong> @selectedWork.EffortLevel</MudText>
                    <MudText><strong>Contact:</strong> @selectedWork.ContactName (@selectedWork.ContactEmail)</MudText>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <MudText>No Good Work Selected</MudText>
        }
    </MudDrawer>
</MudContainer>

<style>
    .fab-refresh {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
    }
</style>

@code {
    private GoogleMap _map;
    private MapOptions _mapOptions;
    private List<GoodWorksModel>? GoodWorks;
    private bool isDrawerOpen = false;
    private GoodWorksModel? selectedWork;

    protected override async Task OnInitializedAsync()
    {
        _mapOptions = new MapOptions
        {
            Zoom = 12,
            Center = new LatLngLiteral { Lat = 34.7304, Lng = -86.5861 },
            MapTypeId = MapTypeId.Roadmap,
            MapId = "1c544c4b742178bf"
        };

        await base.OnInitializedAsync();
    }

    private async Task AfterMapRender()
    {
        var southWest = new LatLngLiteral { Lat = -90, Lng = -180 };
        var northEast = new LatLngLiteral { Lat = 90, Lng = 180 };

        GoodWorks = await Neo4jService.GetGoodWorksInBoundsAsync(
            southWest.Lat,
            northEast.Lat,
            southWest.Lng,
            northEast.Lng
        );

        if (GoodWorks == null) return;

        foreach (var work in GoodWorks)
        {
            var advMarker = await AdvancedMarkerElement.CreateAsync(
                _map.JsRuntime,
                new AdvancedMarkerElementOptions
                {
                    Position = new LatLngLiteral { Lat = work.Latitude, Lng = work.Longitude },
                    Content = GenerateInnerContent(work),
                    Title = work.Name,
                    Map = _map.InteropObject
                });

            await advMarker.AddListener("click", () => OnMarkerClick(work));
        }
    }

    private string GenerateInnerContent(GoodWorksModel work)
    {
        return $@"
        <div style='text-align: center; width: 200px;'>
            <div style='margin-bottom: 8px;'>
                <i class='mud-icon mud-icon-size-xxl mud-icon-color-primary'>location_on</i>
            </div>
            <h4 class='mud-typography mud-typography-h6' style='color: #1976D2;'>{work.Name}</h4>
            <p class='mud-typography mud-typography-body2' style='color: #757575;'>{work.Category}</p>
            <button class='mud-button mud-button-contained mud-button-primary'>
                <span class='mud-button-label'>View Details</span>
            </button>
        </div>";
    }

    private void OnMarkerClick(GoodWorksModel work)
    {
        selectedWork = work;
        isDrawerOpen = true;
        StateHasChanged();
    }

    private void ReloadData()
    {
        isDrawerOpen = false;
        selectedWork = null;
        StateHasChanged();
    }
}
