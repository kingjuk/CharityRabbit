@page "/"
@using CharityRabbit.Models

<PageTitle>Charity Rabbit</PageTitle>

@inject Neo4jService _neo4jService

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4 mt-4">
    <MudPaper Elevation="4" Class="pa-4 text-center">
        <MudCarousel Class="mud-width-full" Style="height:180px;" TData="object">
            <MudCarouselItem>
                <MudCard Class="mb-3">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Ephesians 2:10 (NIV)</MudText>
                        <MudText Typo="Typo.body1">
                            "For we are God’s handiwork, created in Christ Jesus to do good works, which God prepared in advance for us to do."
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudCarouselItem>
            <MudCarouselItem>
                <MudCard Class="mb-3">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Galatians 6:9 (NIV)</MudText>
                        <MudText Typo="Typo.body1">
                            "Let us not become weary in doing good, for at the proper time we will reap a harvest if we do not give up."
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudCarouselItem>
            <MudCarouselItem>
                <MudCard Class="mb-3">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Matthew 5:16 (NIV)</MudText>
                        <MudText Typo="Typo.body1">
                            "Let your light shine before others, that they may see your good deeds and glorify your Father in heaven."
                        </MudText>
                    </MudCardContent>
                </MudCard>

            </MudCarouselItem>
            <MudCarouselItem>
                <MudCard Class="mb-3">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Hebrews 10:24 (NIV)</MudText>
                        <MudText Typo="Typo.body1">
                            "And let us consider how we may spur one another on toward love and good deeds."
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudCarouselItem>
            <MudCarouselItem>
                <MudCard Class="mb-3">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Hebrews 10:24 (NIV)</MudText>
                        <MudText Typo="Typo.body1">
                            "And let us consider how we may spur one another on toward love and good deeds."
                        </MudText>
                    </MudCardContent>
                </MudCard>

            </MudCarouselItem>
            <MudCarouselItem>
                <MudCard Class="mb-3">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">James 2:17 (NIV)</MudText>
                        <MudText Typo="Typo.body1">
                            "In the same way, faith by itself, if it is not accompanied by action, is dead."
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudCarouselItem>
        </MudCarousel>

        <MudDataGrid @ref="dataGrid" T="GoodWorksModel" ServerData="ServerReload" Filterable="true" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Nearby Good Works</MudText>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s => OnGlobalSearch(s))" Placeholder="Search All Columns"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Immediate="true" />
            </ToolBarContent>

            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Name" Filterable="false" />
                <PropertyColumn Property="x => x.Category" Title="Category" Filterable="false" />
                <PropertyColumn Property="x => x.EffortLevel" Title="Effort Level" Filterable="false" />
                <PropertyColumn Property="x => x.ContactName" Title="Contact" Filterable="false" />
                <PropertyColumn Property="x => x.ContactEmail" Title="Email" Filterable="false" />
                <PropertyColumn Property="x => x.StartTime" Title="Start Time" Filterable="false" />
                <PropertyColumn Property="x => x.EndTime" Title="End Time" Filterable="false" />
            </Columns>

            <PagerContent>
                <MudDataGridPager T="GoodWorksModel" />
            </PagerContent>
        </MudDataGrid>
    </MudPaper>
</MudContainer>

@code {
    MudDataGrid<GoodWorksModel> dataGrid;
    private string globalSearchString = string.Empty;

    private async Task<GridData<GoodWorksModel>> ServerReload(GridState<GoodWorksModel> state)
    {
        var goodWorks = await _neo4jService.GetAllGoodWorksWithRelationshipsAsync();

        // Global Search
        if (!string.IsNullOrWhiteSpace(globalSearchString))
        {
            goodWorks = goodWorks.Where(g =>
                (g.Name?.Contains(globalSearchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (g.Category?.Contains(globalSearchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (g.EffortLevel?.Contains(globalSearchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (g.ContactName?.Contains(globalSearchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (g.ContactEmail?.Contains(globalSearchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (g.StartTime.ToString()?.Contains(globalSearchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (g.EndTime.ToString()?.Contains(globalSearchString, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();
        }

        // Sorting
        if (state.SortDefinitions.Any())
        {
            var sortDefinition = state.SortDefinitions.First();
            var sortField = sortDefinition.SortBy;
            goodWorks = sortField switch
            {
                "Name" => sortDefinition.Descending
                    ? goodWorks.OrderByDescending(g => g.Name).ToList()
                    : goodWorks.OrderBy(g => g.Name).ToList(),
                "Category" => sortDefinition.Descending
                    ? goodWorks.OrderByDescending(g => g.Category).ToList()
                    : goodWorks.OrderBy(g => g.Category).ToList(),
                "EffortLevel" => sortDefinition.Descending
                    ? goodWorks.OrderByDescending(g => g.EffortLevel).ToList()
                    : goodWorks.OrderBy(g => g.EffortLevel).ToList(),
                "ContactName" => sortDefinition.Descending
                    ? goodWorks.OrderByDescending(g => g.ContactName).ToList()
                    : goodWorks.OrderBy(g => g.ContactName).ToList(),
                "ContactEmail" => sortDefinition.Descending
                    ? goodWorks.OrderByDescending(g => g.ContactEmail).ToList()
                    : goodWorks.OrderBy(g => g.ContactEmail).ToList(),
                "StartTime" => sortDefinition.Descending
                    ? goodWorks.OrderByDescending(g => g.StartTime).ToList()
                    : goodWorks.OrderBy(g => g.StartTime).ToList(),
                "EndTime" => sortDefinition.Descending
                    ? goodWorks.OrderByDescending(g => g.EndTime).ToList()
                    : goodWorks.OrderBy(g => g.EndTime).ToList(),
                _ => goodWorks
            };
        }

        return new GridData<GoodWorksModel>
            {
                TotalItems = goodWorks.Count,
                Items = goodWorks
            };
    }

    private Task OnGlobalSearch(string text)
    {
        globalSearchString = text;
        return dataGrid.ReloadServerData();
    }
}

